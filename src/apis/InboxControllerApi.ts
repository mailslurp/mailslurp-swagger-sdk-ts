/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateInboxDto,
    CreateInboxDtoFromJSON,
    CreateInboxDtoToJSON,
    EmailPreview,
    EmailPreviewFromJSON,
    EmailPreviewToJSON,
    ExpiredInboxDto,
    ExpiredInboxDtoFromJSON,
    ExpiredInboxDtoToJSON,
    Inbox,
    InboxFromJSON,
    InboxToJSON,
    PageEmailPreview,
    PageEmailPreviewFromJSON,
    PageEmailPreviewToJSON,
    PageExpiredInboxRecordProjection,
    PageExpiredInboxRecordProjectionFromJSON,
    PageExpiredInboxRecordProjectionToJSON,
    PageInboxProjection,
    PageInboxProjectionFromJSON,
    PageInboxProjectionToJSON,
    PageSentEmailProjection,
    PageSentEmailProjectionFromJSON,
    PageSentEmailProjectionToJSON,
    SendEmailOptions,
    SendEmailOptionsFromJSON,
    SendEmailOptionsToJSON,
    SentEmailDto,
    SentEmailDtoFromJSON,
    SentEmailDtoToJSON,
    SetInboxFavouritedOptions,
    SetInboxFavouritedOptionsFromJSON,
    SetInboxFavouritedOptionsToJSON,
    UpdateInboxOptions,
    UpdateInboxOptionsFromJSON,
    UpdateInboxOptionsToJSON,
} from '../models';

export interface CreateInboxRequest {
    description?: string;
    emailAddress?: string;
    expiresAt?: Date;
    expiresIn?: number;
    favourite?: boolean;
    name?: string;
    tags?: Array<string>;
    useDomainPool?: boolean;
}

export interface CreateInboxWithOptionsRequest {
    createInboxDto: CreateInboxDto;
}

export interface DeleteInboxRequest {
    inboxId: string;
}

export interface GetAllInboxesRequest {
    favourite?: boolean;
    page?: number;
    search?: string;
    size?: number;
    sort?: GetAllInboxesSortEnum;
    tag?: string;
}

export interface GetEmailsRequest {
    inboxId: string;
    limit?: number;
    minCount?: number;
    retryTimeout?: number;
    since?: Date;
    size?: number;
    sort?: GetEmailsSortEnum;
}

export interface GetExpiredInboxRecordByIdRequest {
    expiredId: string;
}

export interface GetExpiredInboxRecordByInboxIdRequest {
    inboxId: string;
}

export interface GetExpiredInboxRecordsRequest {
    page?: number;
    size?: number;
    sort?: GetExpiredInboxRecordsSortEnum;
}

export interface GetInboxRequest {
    inboxId: string;
}

export interface GetInboxEmailsPaginatedRequest {
    inboxId: string;
    page?: number;
    size?: number;
    sort?: GetInboxEmailsPaginatedSortEnum;
}

export interface GetInboxSentEmailsRequest {
    inboxId: string;
    page?: number;
    size?: number;
    sort?: GetInboxSentEmailsSortEnum;
}

export interface GetInboxesRequest {
    size?: number;
    sort?: GetInboxesSortEnum;
}

export interface SendEmailRequest {
    inboxId: string;
    sendEmailOptions?: SendEmailOptions;
}

export interface SendEmailAndConfirmRequest {
    inboxId: string;
    sendEmailOptions?: SendEmailOptions;
}

export interface SetInboxFavouritedRequest {
    inboxId: string;
    setInboxFavouritedOptions: SetInboxFavouritedOptions;
}

export interface UpdateInboxRequest {
    inboxId: string;
    updateInboxOptions: UpdateInboxOptions;
}

/**
 * InboxControllerApi - interface
 * 
 * @export
 * @interface InboxControllerApiInterface
 */
export interface InboxControllerApiInterface {
    /**
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     * @summary Create an Inbox (email address)
     * @param {string} [description] Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with
     * @param {string} [emailAddress] A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.
     * @param {Date} [expiresAt] Optional inbox expiration date. If null then this inbox is permanent and the emails in it won\&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSSXXX.
     * @param {number} [expiresIn] Number of milliseconds that inbox should exist for
     * @param {boolean} [favourite] Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering
     * @param {string} [name] Optional name of the inbox. Displayed in the dashboard for easier search
     * @param {Array<string>} [tags] Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.
     * @param {boolean} [useDomainPool] Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    createInboxRaw(requestParameters: CreateInboxRequest): Promise<runtime.ApiResponse<Inbox>>;

    /**
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     * Create an Inbox (email address)
     */
    createInbox(requestParameters: CreateInboxRequest): Promise<Inbox>;

    /**
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     * @summary Create an inbox with additional options
     * @param {CreateInboxDto} createInboxDto createInboxDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    createInboxWithOptionsRaw(requestParameters: CreateInboxWithOptionsRequest): Promise<runtime.ApiResponse<Inbox>>;

    /**
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     * Create an inbox with additional options
     */
    createInboxWithOptions(requestParameters: CreateInboxWithOptionsRequest): Promise<Inbox>;

    /**
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     * @summary Delete all inboxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    deleteAllInboxesRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     * Delete all inboxes
     */
    deleteAllInboxes(): Promise<void>;

    /**
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     * @summary Delete inbox
     * @param {string} inboxId inboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    deleteInboxRaw(requestParameters: DeleteInboxRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     * Delete inbox
     */
    deleteInbox(requestParameters: DeleteInboxRequest): Promise<void>;

    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return(, and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * @summary List All Inboxes Paginated
     * @param {boolean} [favourite] Optionally filter results for favourites only
     * @param {number} [page] Optional page index in inbox list pagination
     * @param {string} [search] Optionally filter by search words partial matching ID, tags, name, and email address
     * @param {number} [size] Optional page size in inbox list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {string} [tag] Optionally filter by tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getAllInboxesRaw(requestParameters: GetAllInboxesRequest): Promise<runtime.ApiResponse<PageInboxProjection>>;

    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return(, and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * List All Inboxes Paginated
     */
    getAllInboxes(requestParameters: GetAllInboxesRequest): Promise<PageInboxProjection>;

    /**
     * List emails that an inbox has received. Only emails that are sent to the inbox\'s email address will appear in the inbox. It may take several seconds for any email you send to an inbox\'s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     * @summary Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     * @param {string} inboxId Id of inbox that emails belongs to
     * @param {number} [limit] Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller
     * @param {number} [minCount] Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.
     * @param {number} [retryTimeout] Maximum milliseconds to spend retrying inbox database until minCount emails are returned
     * @param {Date} [since] Exclude emails received before this ISO 8601 date time
     * @param {number} [size] Alias for limit. Assessed first before assessing any passed limit.
     * @param {'ASC' | 'DESC'} [sort] Sort the results by received date and direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getEmailsRaw(requestParameters: GetEmailsRequest): Promise<runtime.ApiResponse<Array<EmailPreview>>>;

    /**
     * List emails that an inbox has received. Only emails that are sent to the inbox\'s email address will appear in the inbox. It may take several seconds for any email you send to an inbox\'s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     */
    getEmails(requestParameters: GetEmailsRequest): Promise<Array<EmailPreview>>;

    /**
     * Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     * @summary Get an expired inbox record
     * @param {string} expiredId ID of the ExpiredInboxRecord you want to retrieve. This is different from the ID of the inbox you are interested in. See other methods for getting ExpiredInboxRecord for an inbox inboxId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getExpiredInboxRecordByIdRaw(requestParameters: GetExpiredInboxRecordByIdRequest): Promise<runtime.ApiResponse<ExpiredInboxDto>>;

    /**
     * Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     * Get an expired inbox record
     */
    getExpiredInboxRecordById(requestParameters: GetExpiredInboxRecordByIdRequest): Promise<ExpiredInboxDto>;

    /**
     * Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     * @summary Get expired inbox record for a previously existing inbox
     * @param {string} inboxId ID of inbox you want to retrieve (not the inbox ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getExpiredInboxRecordByInboxIdRaw(requestParameters: GetExpiredInboxRecordByInboxIdRequest): Promise<runtime.ApiResponse<ExpiredInboxDto>>;

    /**
     * Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     * Get expired inbox record for a previously existing inbox
     */
    getExpiredInboxRecordByInboxId(requestParameters: GetExpiredInboxRecordByInboxIdRequest): Promise<ExpiredInboxDto>;

    /**
     * Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     * @summary List records of expired inboxes
     * @param {number} [page] Optional page index in inbox sent email list pagination
     * @param {number} [size] Optional page size in inbox sent email list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getExpiredInboxRecordsRaw(requestParameters: GetExpiredInboxRecordsRequest): Promise<runtime.ApiResponse<PageExpiredInboxRecordProjection>>;

    /**
     * Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     * List records of expired inboxes
     */
    getExpiredInboxRecords(requestParameters: GetExpiredInboxRecordsRequest): Promise<PageExpiredInboxRecordProjection>;

    /**
     * Returns an inbox\'s properties, including its email address and ID.
     * @summary Get Inbox
     * @param {string} inboxId inboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getInboxRaw(requestParameters: GetInboxRequest): Promise<runtime.ApiResponse<Inbox>>;

    /**
     * Returns an inbox\'s properties, including its email address and ID.
     * Get Inbox
     */
    getInbox(requestParameters: GetInboxRequest): Promise<Inbox>;

    /**
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     * @summary Get inbox emails paginated
     * @param {string} inboxId Id of inbox that emails belongs to
     * @param {number} [page] Optional page index in inbox emails list pagination
     * @param {number} [size] Optional page size in inbox emails list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getInboxEmailsPaginatedRaw(requestParameters: GetInboxEmailsPaginatedRequest): Promise<runtime.ApiResponse<PageEmailPreview>>;

    /**
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     * Get inbox emails paginated
     */
    getInboxEmailsPaginated(requestParameters: GetInboxEmailsPaginatedRequest): Promise<PageEmailPreview>;

    /**
     * Returns an inbox\'s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     * @summary Get Inbox Sent Emails
     * @param {string} inboxId inboxId
     * @param {number} [page] Optional page index in inbox sent email list pagination
     * @param {number} [size] Optional page size in inbox sent email list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getInboxSentEmailsRaw(requestParameters: GetInboxSentEmailsRequest): Promise<runtime.ApiResponse<PageSentEmailProjection>>;

    /**
     * Returns an inbox\'s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     * Get Inbox Sent Emails
     */
    getInboxSentEmails(requestParameters: GetInboxSentEmailsRequest): Promise<PageSentEmailProjection>;

    /**
     * Get all inbox tags
     * @summary Get inbox tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getInboxTagsRaw(): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Get all inbox tags
     * Get inbox tags
     */
    getInboxTags(): Promise<Array<string>>;

    /**
     * List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended. You can provide a limit and sort parameter.
     * @summary List Inboxes / Email Addresses
     * @param {number} [size] Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries.
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    getInboxesRaw(requestParameters: GetInboxesRequest): Promise<runtime.ApiResponse<Array<Inbox>>>;

    /**
     * List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended. You can provide a limit and sort parameter.
     * List Inboxes / Email Addresses
     */
    getInboxes(requestParameters: GetInboxesRequest): Promise<Array<Inbox>>;

    /**
     * Send an email from an inbox\'s email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox\'s id not the inbox\'s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
     * @summary Send Email
     * @param {string} inboxId ID of the inbox you want to send the email from
     * @param {SendEmailOptions} [sendEmailOptions] Options for the email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    sendEmailRaw(requestParameters: SendEmailRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Send an email from an inbox\'s email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox\'s id not the inbox\'s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
     * Send Email
     */
    sendEmail(requestParameters: SendEmailRequest): Promise<void>;

    /**
     * Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with link the the sent object created for it.
     * @summary Send email and return sent confirmation
     * @param {string} inboxId ID of the inbox you want to send the email from
     * @param {SendEmailOptions} [sendEmailOptions] Options for the email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    sendEmailAndConfirmRaw(requestParameters: SendEmailAndConfirmRequest): Promise<runtime.ApiResponse<SentEmailDto>>;

    /**
     * Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with link the the sent object created for it.
     * Send email and return sent confirmation
     */
    sendEmailAndConfirm(requestParameters: SendEmailAndConfirmRequest): Promise<SentEmailDto>;

    /**
     * Set and return new favourite state for an inbox
     * @summary Set inbox favourited state
     * @param {string} inboxId inboxId
     * @param {SetInboxFavouritedOptions} setInboxFavouritedOptions setInboxFavouritedOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    setInboxFavouritedRaw(requestParameters: SetInboxFavouritedRequest): Promise<runtime.ApiResponse<Inbox>>;

    /**
     * Set and return new favourite state for an inbox
     * Set inbox favourited state
     */
    setInboxFavourited(requestParameters: SetInboxFavouritedRequest): Promise<Inbox>;

    /**
     * Update editable fields on an inbox
     * @summary Update Inbox
     * @param {string} inboxId inboxId
     * @param {UpdateInboxOptions} updateInboxOptions updateInboxOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxControllerApiInterface
     */
    updateInboxRaw(requestParameters: UpdateInboxRequest): Promise<runtime.ApiResponse<Inbox>>;

    /**
     * Update editable fields on an inbox
     * Update Inbox
     */
    updateInbox(requestParameters: UpdateInboxRequest): Promise<Inbox>;

}

/**
 * 
 */
export class InboxControllerApi extends runtime.BaseAPI implements InboxControllerApiInterface {

    /**
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     * Create an Inbox (email address)
     */
    async createInboxRaw(requestParameters: CreateInboxRequest): Promise<runtime.ApiResponse<Inbox>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.expiresAt !== undefined) {
            queryParameters['expiresAt'] = (requestParameters.expiresAt as any).toISOString();
        }

        if (requestParameters.expiresIn !== undefined) {
            queryParameters['expiresIn'] = requestParameters.expiresIn;
        }

        if (requestParameters.favourite !== undefined) {
            queryParameters['favourite'] = requestParameters.favourite;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.useDomainPool !== undefined) {
            queryParameters['useDomainPool'] = requestParameters.useDomainPool;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxFromJSON(jsonValue));
    }

    /**
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     * Create an Inbox (email address)
     */
    async createInbox(requestParameters: CreateInboxRequest): Promise<Inbox> {
        const response = await this.createInboxRaw(requestParameters);
        return await response.value();
    }

    /**
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     * Create an inbox with additional options
     */
    async createInboxWithOptionsRaw(requestParameters: CreateInboxWithOptionsRequest): Promise<runtime.ApiResponse<Inbox>> {
        if (requestParameters.createInboxDto === null || requestParameters.createInboxDto === undefined) {
            throw new runtime.RequiredError('createInboxDto','Required parameter requestParameters.createInboxDto was null or undefined when calling createInboxWithOptions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/withOptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInboxDtoToJSON(requestParameters.createInboxDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxFromJSON(jsonValue));
    }

    /**
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     * Create an inbox with additional options
     */
    async createInboxWithOptions(requestParameters: CreateInboxWithOptionsRequest): Promise<Inbox> {
        const response = await this.createInboxWithOptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     * Delete all inboxes
     */
    async deleteAllInboxesRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     * Delete all inboxes
     */
    async deleteAllInboxes(): Promise<void> {
        await this.deleteAllInboxesRaw();
    }

    /**
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     * Delete inbox
     */
    async deleteInboxRaw(requestParameters: DeleteInboxRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling deleteInbox.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     * Delete inbox
     */
    async deleteInbox(requestParameters: DeleteInboxRequest): Promise<void> {
        await this.deleteInboxRaw(requestParameters);
    }

    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return(, and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * List All Inboxes Paginated
     */
    async getAllInboxesRaw(requestParameters: GetAllInboxesRequest): Promise<runtime.ApiResponse<PageInboxProjection>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.favourite !== undefined) {
            queryParameters['favourite'] = requestParameters.favourite;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/paginated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageInboxProjectionFromJSON(jsonValue));
    }

    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return(, and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * List All Inboxes Paginated
     */
    async getAllInboxes(requestParameters: GetAllInboxesRequest): Promise<PageInboxProjection> {
        const response = await this.getAllInboxesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List emails that an inbox has received. Only emails that are sent to the inbox\'s email address will appear in the inbox. It may take several seconds for any email you send to an inbox\'s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     */
    async getEmailsRaw(requestParameters: GetEmailsRequest): Promise<runtime.ApiResponse<Array<EmailPreview>>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling getEmails.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.minCount !== undefined) {
            queryParameters['minCount'] = requestParameters.minCount;
        }

        if (requestParameters.retryTimeout !== undefined) {
            queryParameters['retryTimeout'] = requestParameters.retryTimeout;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = (requestParameters.since as any).toISOString();
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/emails`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailPreviewFromJSON));
    }

    /**
     * List emails that an inbox has received. Only emails that are sent to the inbox\'s email address will appear in the inbox. It may take several seconds for any email you send to an inbox\'s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     */
    async getEmails(requestParameters: GetEmailsRequest): Promise<Array<EmailPreview>> {
        const response = await this.getEmailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     * Get an expired inbox record
     */
    async getExpiredInboxRecordByIdRaw(requestParameters: GetExpiredInboxRecordByIdRequest): Promise<runtime.ApiResponse<ExpiredInboxDto>> {
        if (requestParameters.expiredId === null || requestParameters.expiredId === undefined) {
            throw new runtime.RequiredError('expiredId','Required parameter requestParameters.expiredId was null or undefined when calling getExpiredInboxRecordById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/expired-records/{expiredId}`.replace(`{${"expiredId"}}`, encodeURIComponent(String(requestParameters.expiredId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpiredInboxDtoFromJSON(jsonValue));
    }

    /**
     * Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     * Get an expired inbox record
     */
    async getExpiredInboxRecordById(requestParameters: GetExpiredInboxRecordByIdRequest): Promise<ExpiredInboxDto> {
        const response = await this.getExpiredInboxRecordByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     * Get expired inbox record for a previously existing inbox
     */
    async getExpiredInboxRecordByInboxIdRaw(requestParameters: GetExpiredInboxRecordByInboxIdRequest): Promise<runtime.ApiResponse<ExpiredInboxDto>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling getExpiredInboxRecordByInboxId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/expired-record`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpiredInboxDtoFromJSON(jsonValue));
    }

    /**
     * Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     * Get expired inbox record for a previously existing inbox
     */
    async getExpiredInboxRecordByInboxId(requestParameters: GetExpiredInboxRecordByInboxIdRequest): Promise<ExpiredInboxDto> {
        const response = await this.getExpiredInboxRecordByInboxIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     * List records of expired inboxes
     */
    async getExpiredInboxRecordsRaw(requestParameters: GetExpiredInboxRecordsRequest): Promise<runtime.ApiResponse<PageExpiredInboxRecordProjection>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/expired-records`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageExpiredInboxRecordProjectionFromJSON(jsonValue));
    }

    /**
     * Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     * List records of expired inboxes
     */
    async getExpiredInboxRecords(requestParameters: GetExpiredInboxRecordsRequest): Promise<PageExpiredInboxRecordProjection> {
        const response = await this.getExpiredInboxRecordsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an inbox\'s properties, including its email address and ID.
     * Get Inbox
     */
    async getInboxRaw(requestParameters: GetInboxRequest): Promise<runtime.ApiResponse<Inbox>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling getInbox.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxFromJSON(jsonValue));
    }

    /**
     * Returns an inbox\'s properties, including its email address and ID.
     * Get Inbox
     */
    async getInbox(requestParameters: GetInboxRequest): Promise<Inbox> {
        const response = await this.getInboxRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     * Get inbox emails paginated
     */
    async getInboxEmailsPaginatedRaw(requestParameters: GetInboxEmailsPaginatedRequest): Promise<runtime.ApiResponse<PageEmailPreview>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling getInboxEmailsPaginated.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/emails/paginated`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEmailPreviewFromJSON(jsonValue));
    }

    /**
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     * Get inbox emails paginated
     */
    async getInboxEmailsPaginated(requestParameters: GetInboxEmailsPaginatedRequest): Promise<PageEmailPreview> {
        const response = await this.getInboxEmailsPaginatedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an inbox\'s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     * Get Inbox Sent Emails
     */
    async getInboxSentEmailsRaw(requestParameters: GetInboxSentEmailsRequest): Promise<runtime.ApiResponse<PageSentEmailProjection>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling getInboxSentEmails.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/sent`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageSentEmailProjectionFromJSON(jsonValue));
    }

    /**
     * Returns an inbox\'s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     * Get Inbox Sent Emails
     */
    async getInboxSentEmails(requestParameters: GetInboxSentEmailsRequest): Promise<PageSentEmailProjection> {
        const response = await this.getInboxSentEmailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all inbox tags
     * Get inbox tags
     */
    async getInboxTagsRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all inbox tags
     * Get inbox tags
     */
    async getInboxTags(): Promise<Array<string>> {
        const response = await this.getInboxTagsRaw();
        return await response.value();
    }

    /**
     * List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended. You can provide a limit and sort parameter.
     * List Inboxes / Email Addresses
     */
    async getInboxesRaw(requestParameters: GetInboxesRequest): Promise<runtime.ApiResponse<Array<Inbox>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InboxFromJSON));
    }

    /**
     * List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended. You can provide a limit and sort parameter.
     * List Inboxes / Email Addresses
     */
    async getInboxes(requestParameters: GetInboxesRequest): Promise<Array<Inbox>> {
        const response = await this.getInboxesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send an email from an inbox\'s email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox\'s id not the inbox\'s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
     * Send Email
     */
    async sendEmailRaw(requestParameters: SendEmailRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling sendEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendEmailOptionsToJSON(requestParameters.sendEmailOptions),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send an email from an inbox\'s email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox\'s id not the inbox\'s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
     * Send Email
     */
    async sendEmail(requestParameters: SendEmailRequest): Promise<void> {
        await this.sendEmailRaw(requestParameters);
    }

    /**
     * Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with link the the sent object created for it.
     * Send email and return sent confirmation
     */
    async sendEmailAndConfirmRaw(requestParameters: SendEmailAndConfirmRequest): Promise<runtime.ApiResponse<SentEmailDto>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling sendEmailAndConfirm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/confirm`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendEmailOptionsToJSON(requestParameters.sendEmailOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SentEmailDtoFromJSON(jsonValue));
    }

    /**
     * Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with link the the sent object created for it.
     * Send email and return sent confirmation
     */
    async sendEmailAndConfirm(requestParameters: SendEmailAndConfirmRequest): Promise<SentEmailDto> {
        const response = await this.sendEmailAndConfirmRaw(requestParameters);
        return await response.value();
    }

    /**
     * Set and return new favourite state for an inbox
     * Set inbox favourited state
     */
    async setInboxFavouritedRaw(requestParameters: SetInboxFavouritedRequest): Promise<runtime.ApiResponse<Inbox>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling setInboxFavourited.');
        }

        if (requestParameters.setInboxFavouritedOptions === null || requestParameters.setInboxFavouritedOptions === undefined) {
            throw new runtime.RequiredError('setInboxFavouritedOptions','Required parameter requestParameters.setInboxFavouritedOptions was null or undefined when calling setInboxFavourited.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/favourite`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetInboxFavouritedOptionsToJSON(requestParameters.setInboxFavouritedOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxFromJSON(jsonValue));
    }

    /**
     * Set and return new favourite state for an inbox
     * Set inbox favourited state
     */
    async setInboxFavourited(requestParameters: SetInboxFavouritedRequest): Promise<Inbox> {
        const response = await this.setInboxFavouritedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update editable fields on an inbox
     * Update Inbox
     */
    async updateInboxRaw(requestParameters: UpdateInboxRequest): Promise<runtime.ApiResponse<Inbox>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling updateInbox.');
        }

        if (requestParameters.updateInboxOptions === null || requestParameters.updateInboxOptions === undefined) {
            throw new runtime.RequiredError('updateInboxOptions','Required parameter requestParameters.updateInboxOptions was null or undefined when calling updateInbox.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInboxOptionsToJSON(requestParameters.updateInboxOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxFromJSON(jsonValue));
    }

    /**
     * Update editable fields on an inbox
     * Update Inbox
     */
    async updateInbox(requestParameters: UpdateInboxRequest): Promise<Inbox> {
        const response = await this.updateInboxRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAllInboxesSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetEmailsSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetExpiredInboxRecordsSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetInboxEmailsPaginatedSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetInboxSentEmailsSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetInboxesSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
