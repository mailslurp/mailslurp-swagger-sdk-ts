/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Bounce,
    BounceFromJSON,
    BounceToJSON,
    BounceRecipient,
    BounceRecipientFromJSON,
    BounceRecipientToJSON,
    PageBouncedEmail,
    PageBouncedEmailFromJSON,
    PageBouncedEmailToJSON,
    PageBouncedRecipients,
    PageBouncedRecipientsFromJSON,
    PageBouncedRecipientsToJSON,
} from '../models';

export interface GetBouncedEmailRequest {
    id: string;
}

export interface GetBouncedEmail1Request {
    id: string;
}

export interface GetBouncedEmailsRequest {
    page?: number;
    size?: number;
    sort?: GetBouncedEmailsSortEnum;
}

export interface GetBouncedRecipientsRequest {
    page?: number;
    size?: number;
    sort?: GetBouncedRecipientsSortEnum;
}

/**
 * BounceControllerApi - interface
 * 
 * @export
 * @interface BounceControllerApiInterface
 */
export interface BounceControllerApiInterface {
    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * @summary Get a bounced email.
     * @param {string} id ID of the bounced email to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BounceControllerApiInterface
     */
    getBouncedEmailRaw(requestParameters: GetBouncedEmailRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    getBouncedEmail(requestParameters: GetBouncedEmailRequest): Promise<void>;

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * @summary Get a bounced email.
     * @param {string} id ID of the bounced recipient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BounceControllerApiInterface
     */
    getBouncedEmail1Raw(requestParameters: GetBouncedEmail1Request): Promise<runtime.ApiResponse<void>>;

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    getBouncedEmail1(requestParameters: GetBouncedEmail1Request): Promise<void>;

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * @summary Get paginated list of bounced emails.
     * @param {number} [page] Optional page index 
     * @param {number} [size] Optional page size 
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BounceControllerApiInterface
     */
    getBouncedEmailsRaw(requestParameters: GetBouncedEmailsRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get paginated list of bounced emails.
     */
    getBouncedEmails(requestParameters: GetBouncedEmailsRequest): Promise<void>;

    /**
     * Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
     * @summary Get paginated list of bounced recipients.
     * @param {number} [page] Optional page index 
     * @param {number} [size] Optional page size 
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BounceControllerApiInterface
     */
    getBouncedRecipientsRaw(requestParameters: GetBouncedRecipientsRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
     * Get paginated list of bounced recipients.
     */
    getBouncedRecipients(requestParameters: GetBouncedRecipientsRequest): Promise<void>;

}

/**
 * 
 */
export class BounceControllerApi extends runtime.BaseAPI implements BounceControllerApiInterface {

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    async getBouncedEmailRaw(requestParameters: GetBouncedEmailRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBouncedEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/bounce/emails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    async getBouncedEmail(requestParameters: GetBouncedEmailRequest): Promise<void> {
        await this.getBouncedEmailRaw(requestParameters);
    }

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    async getBouncedEmail1Raw(requestParameters: GetBouncedEmail1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBouncedEmail1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/bounce/recipients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    async getBouncedEmail1(requestParameters: GetBouncedEmail1Request): Promise<void> {
        await this.getBouncedEmail1Raw(requestParameters);
    }

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get paginated list of bounced emails.
     */
    async getBouncedEmailsRaw(requestParameters: GetBouncedEmailsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/bounce/emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get paginated list of bounced emails.
     */
    async getBouncedEmails(requestParameters: GetBouncedEmailsRequest): Promise<void> {
        await this.getBouncedEmailsRaw(requestParameters);
    }

    /**
     * Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
     * Get paginated list of bounced recipients.
     */
    async getBouncedRecipientsRaw(requestParameters: GetBouncedRecipientsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/bounce/recipients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
     * Get paginated list of bounced recipients.
     */
    async getBouncedRecipients(requestParameters: GetBouncedRecipientsRequest): Promise<void> {
        await this.getBouncedRecipientsRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetBouncedEmailsSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetBouncedRecipientsSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
