/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Alias,
    AliasFromJSON,
    AliasToJSON,
    AliasDto,
    AliasDtoFromJSON,
    AliasDtoToJSON,
    CreateAliasOptions,
    CreateAliasOptionsFromJSON,
    CreateAliasOptionsToJSON,
    PageAlias,
    PageAliasFromJSON,
    PageAliasToJSON,
    UpdateAliasOptions,
    UpdateAliasOptionsFromJSON,
    UpdateAliasOptionsToJSON,
} from '../models';

export interface CreateAliasRequest {
    createAliasOptions: CreateAliasOptions;
}

export interface DeleteAliasRequest {
    aliasId: string;
}

export interface GetAliasRequest {
    aliasId: string;
}

export interface GetAliasesRequest {
    page?: number;
    size?: number;
    sort?: GetAliasesSortEnum;
}

export interface UpdateAliasRequest {
    aliasId: string;
    updateAliasOptions: UpdateAliasOptions;
}

/**
 * AliasControllerApi - interface
 * 
 * @export
 * @interface AliasControllerApiInterface
 */
export interface AliasControllerApiInterface {
    /**
     * Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     * @summary Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     * @param {CreateAliasOptions} createAliasOptions createAliasOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    createAliasRaw(requestParameters: CreateAliasRequest): Promise<runtime.ApiResponse<AliasDto>>;

    /**
     * Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     * Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     */
    createAlias(requestParameters: CreateAliasRequest): Promise<AliasDto>;

    /**
     * 
     * @summary Delete an email alias
     * @param {string} aliasId aliasId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    deleteAliasRaw(requestParameters: DeleteAliasRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an email alias
     */
    deleteAlias(requestParameters: DeleteAliasRequest): Promise<void>;

    /**
     * Get an email alias by ID
     * @summary Get an email alias
     * @param {string} aliasId aliasId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    getAliasRaw(requestParameters: GetAliasRequest): Promise<runtime.ApiResponse<AliasDto>>;

    /**
     * Get an email alias by ID
     * Get an email alias
     */
    getAlias(requestParameters: GetAliasRequest): Promise<AliasDto>;

    /**
     * Get all email aliases in paginated form
     * @summary Get all email aliases you have created
     * @param {number} [page] Optional page index in alias list pagination
     * @param {number} [size] Optional page size in alias list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    getAliasesRaw(requestParameters: GetAliasesRequest): Promise<runtime.ApiResponse<PageAlias>>;

    /**
     * Get all email aliases in paginated form
     * Get all email aliases you have created
     */
    getAliases(requestParameters: GetAliasesRequest): Promise<PageAlias>;

    /**
     * 
     * @summary Update an email alias
     * @param {string} aliasId aliasId
     * @param {UpdateAliasOptions} updateAliasOptions updateAliasOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    updateAliasRaw(requestParameters: UpdateAliasRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Update an email alias
     */
    updateAlias(requestParameters: UpdateAliasRequest): Promise<void>;

}

/**
 * 
 */
export class AliasControllerApi extends runtime.BaseAPI implements AliasControllerApiInterface {

    /**
     * Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     * Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     */
    async createAliasRaw(requestParameters: CreateAliasRequest): Promise<runtime.ApiResponse<AliasDto>> {
        if (requestParameters.createAliasOptions === null || requestParameters.createAliasOptions === undefined) {
            throw new runtime.RequiredError('createAliasOptions','Required parameter requestParameters.createAliasOptions was null or undefined when calling createAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAliasOptionsToJSON(requestParameters.createAliasOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AliasDtoFromJSON(jsonValue));
    }

    /**
     * Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     * Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     */
    async createAlias(requestParameters: CreateAliasRequest): Promise<AliasDto> {
        const response = await this.createAliasRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an email alias
     */
    async deleteAliasRaw(requestParameters: DeleteAliasRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aliasId === null || requestParameters.aliasId === undefined) {
            throw new runtime.RequiredError('aliasId','Required parameter requestParameters.aliasId was null or undefined when calling deleteAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasId}`.replace(`{${"aliasId"}}`, encodeURIComponent(String(requestParameters.aliasId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an email alias
     */
    async deleteAlias(requestParameters: DeleteAliasRequest): Promise<void> {
        await this.deleteAliasRaw(requestParameters);
    }

    /**
     * Get an email alias by ID
     * Get an email alias
     */
    async getAliasRaw(requestParameters: GetAliasRequest): Promise<runtime.ApiResponse<AliasDto>> {
        if (requestParameters.aliasId === null || requestParameters.aliasId === undefined) {
            throw new runtime.RequiredError('aliasId','Required parameter requestParameters.aliasId was null or undefined when calling getAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasId}`.replace(`{${"aliasId"}}`, encodeURIComponent(String(requestParameters.aliasId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AliasDtoFromJSON(jsonValue));
    }

    /**
     * Get an email alias by ID
     * Get an email alias
     */
    async getAlias(requestParameters: GetAliasRequest): Promise<AliasDto> {
        const response = await this.getAliasRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all email aliases in paginated form
     * Get all email aliases you have created
     */
    async getAliasesRaw(requestParameters: GetAliasesRequest): Promise<runtime.ApiResponse<PageAlias>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageAliasFromJSON(jsonValue));
    }

    /**
     * Get all email aliases in paginated form
     * Get all email aliases you have created
     */
    async getAliases(requestParameters: GetAliasesRequest): Promise<PageAlias> {
        const response = await this.getAliasesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an email alias
     */
    async updateAliasRaw(requestParameters: UpdateAliasRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aliasId === null || requestParameters.aliasId === undefined) {
            throw new runtime.RequiredError('aliasId','Required parameter requestParameters.aliasId was null or undefined when calling updateAlias.');
        }

        if (requestParameters.updateAliasOptions === null || requestParameters.updateAliasOptions === undefined) {
            throw new runtime.RequiredError('updateAliasOptions','Required parameter requestParameters.updateAliasOptions was null or undefined when calling updateAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasId}`.replace(`{${"aliasId"}}`, encodeURIComponent(String(requestParameters.aliasId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAliasOptionsToJSON(requestParameters.updateAliasOptions),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an email alias
     */
    async updateAlias(requestParameters: UpdateAliasRequest): Promise<void> {
        await this.updateAliasRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAliasesSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
