/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Alias,
    AliasFromJSON,
    AliasToJSON,
    CreateAnonymousAliasOptions,
    CreateAnonymousAliasOptionsFromJSON,
    CreateAnonymousAliasOptionsToJSON,
    CreateOwnedAliasOptions,
    CreateOwnedAliasOptionsFromJSON,
    CreateOwnedAliasOptionsToJSON,
    PageAlias,
    PageAliasFromJSON,
    PageAliasToJSON,
} from '../models';

export interface CreateAliasRequest {
    createOwnedAliasOptions: CreateOwnedAliasOptions;
}

export interface CreateAnonymousAliasRequest {
    createAnonymousAliasOptions: CreateAnonymousAliasOptions;
}

export interface DeleteAliasRequest {
    aliasId: string;
}

export interface GetAliasRequest {
    aliasId: string;
}

export interface GetAliasesRequest {
    page?: number;
    size?: number;
    sort?: GetAliasesSortEnum;
}

export interface UpdateAliasRequest {
    aliasId: string;
    createOwnedAliasOptions: CreateOwnedAliasOptions;
}

/**
 * AliasControllerApi - interface
 * 
 * @export
 * @interface AliasControllerApiInterface
 */
export interface AliasControllerApiInterface {
    /**
     * Create an email alias belonging to a user ID. To create anonymous aliases use the `createAnonymousAlias` method.
     * @summary Create an email alias
     * @param {CreateOwnedAliasOptions} createOwnedAliasOptions createOwnedAliasOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    createAliasRaw(requestParameters: CreateAliasRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Create an email alias belonging to a user ID. To create anonymous aliases use the `createAnonymousAlias` method.
     * Create an email alias
     */
    createAlias(requestParameters: CreateAliasRequest): Promise<void>;

    /**
     * 
     * @summary Create an anonymous email alias
     * @param {CreateAnonymousAliasOptions} createAnonymousAliasOptions createAnonymousAliasOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    createAnonymousAliasRaw(requestParameters: CreateAnonymousAliasRequest): Promise<runtime.ApiResponse<Alias>>;

    /**
     * Create an anonymous email alias
     */
    createAnonymousAlias(requestParameters: CreateAnonymousAliasRequest): Promise<Alias>;

    /**
     * 
     * @summary Delete an owned alias
     * @param {string} aliasId aliasId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    deleteAliasRaw(requestParameters: DeleteAliasRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an owned alias
     */
    deleteAlias(requestParameters: DeleteAliasRequest): Promise<void>;

    /**
     * Get an email alias by ID
     * @summary Get an email alias
     * @param {string} aliasId aliasId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    getAliasRaw(requestParameters: GetAliasRequest): Promise<runtime.ApiResponse<Alias>>;

    /**
     * Get an email alias by ID
     * Get an email alias
     */
    getAlias(requestParameters: GetAliasRequest): Promise<Alias>;

    /**
     * Get all email aliases in paginated form
     * @summary Get all email aliases
     * @param {number} [page] Optional page index in alias list pagination
     * @param {number} [size] Optional page size in alias list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    getAliasesRaw(requestParameters: GetAliasesRequest): Promise<runtime.ApiResponse<PageAlias>>;

    /**
     * Get all email aliases in paginated form
     * Get all email aliases
     */
    getAliases(requestParameters: GetAliasesRequest): Promise<PageAlias>;

    /**
     * 
     * @summary Update an owned alias
     * @param {string} aliasId aliasId
     * @param {CreateOwnedAliasOptions} createOwnedAliasOptions createOwnedAliasOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasControllerApiInterface
     */
    updateAliasRaw(requestParameters: UpdateAliasRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Update an owned alias
     */
    updateAlias(requestParameters: UpdateAliasRequest): Promise<void>;

}

/**
 * 
 */
export class AliasControllerApi extends runtime.BaseAPI implements AliasControllerApiInterface {

    /**
     * Create an email alias belonging to a user ID. To create anonymous aliases use the `createAnonymousAlias` method.
     * Create an email alias
     */
    async createAliasRaw(requestParameters: CreateAliasRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createOwnedAliasOptions === null || requestParameters.createOwnedAliasOptions === undefined) {
            throw new runtime.RequiredError('createOwnedAliasOptions','Required parameter requestParameters.createOwnedAliasOptions was null or undefined when calling createAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOwnedAliasOptionsToJSON(requestParameters.createOwnedAliasOptions),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an email alias belonging to a user ID. To create anonymous aliases use the `createAnonymousAlias` method.
     * Create an email alias
     */
    async createAlias(requestParameters: CreateAliasRequest): Promise<void> {
        await this.createAliasRaw(requestParameters);
    }

    /**
     * Create an anonymous email alias
     */
    async createAnonymousAliasRaw(requestParameters: CreateAnonymousAliasRequest): Promise<runtime.ApiResponse<Alias>> {
        if (requestParameters.createAnonymousAliasOptions === null || requestParameters.createAnonymousAliasOptions === undefined) {
            throw new runtime.RequiredError('createAnonymousAliasOptions','Required parameter requestParameters.createAnonymousAliasOptions was null or undefined when calling createAnonymousAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases/anonymous`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAnonymousAliasOptionsToJSON(requestParameters.createAnonymousAliasOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AliasFromJSON(jsonValue));
    }

    /**
     * Create an anonymous email alias
     */
    async createAnonymousAlias(requestParameters: CreateAnonymousAliasRequest): Promise<Alias> {
        const response = await this.createAnonymousAliasRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an owned alias
     */
    async deleteAliasRaw(requestParameters: DeleteAliasRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aliasId === null || requestParameters.aliasId === undefined) {
            throw new runtime.RequiredError('aliasId','Required parameter requestParameters.aliasId was null or undefined when calling deleteAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasId}`.replace(`{${"aliasId"}}`, encodeURIComponent(String(requestParameters.aliasId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an owned alias
     */
    async deleteAlias(requestParameters: DeleteAliasRequest): Promise<void> {
        await this.deleteAliasRaw(requestParameters);
    }

    /**
     * Get an email alias by ID
     * Get an email alias
     */
    async getAliasRaw(requestParameters: GetAliasRequest): Promise<runtime.ApiResponse<Alias>> {
        if (requestParameters.aliasId === null || requestParameters.aliasId === undefined) {
            throw new runtime.RequiredError('aliasId','Required parameter requestParameters.aliasId was null or undefined when calling getAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasId}`.replace(`{${"aliasId"}}`, encodeURIComponent(String(requestParameters.aliasId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AliasFromJSON(jsonValue));
    }

    /**
     * Get an email alias by ID
     * Get an email alias
     */
    async getAlias(requestParameters: GetAliasRequest): Promise<Alias> {
        const response = await this.getAliasRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all email aliases in paginated form
     * Get all email aliases
     */
    async getAliasesRaw(requestParameters: GetAliasesRequest): Promise<runtime.ApiResponse<PageAlias>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageAliasFromJSON(jsonValue));
    }

    /**
     * Get all email aliases in paginated form
     * Get all email aliases
     */
    async getAliases(requestParameters: GetAliasesRequest): Promise<PageAlias> {
        const response = await this.getAliasesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an owned alias
     */
    async updateAliasRaw(requestParameters: UpdateAliasRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.aliasId === null || requestParameters.aliasId === undefined) {
            throw new runtime.RequiredError('aliasId','Required parameter requestParameters.aliasId was null or undefined when calling updateAlias.');
        }

        if (requestParameters.createOwnedAliasOptions === null || requestParameters.createOwnedAliasOptions === undefined) {
            throw new runtime.RequiredError('createOwnedAliasOptions','Required parameter requestParameters.createOwnedAliasOptions was null or undefined when calling updateAlias.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasId}`.replace(`{${"aliasId"}}`, encodeURIComponent(String(requestParameters.aliasId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOwnedAliasOptionsToJSON(requestParameters.createOwnedAliasOptions),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an owned alias
     */
    async updateAlias(requestParameters: UpdateAliasRequest): Promise<void> {
        await this.updateAliasRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAliasesSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
