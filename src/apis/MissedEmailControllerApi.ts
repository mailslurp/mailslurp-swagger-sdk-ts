/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MissedEmail,
    MissedEmailFromJSON,
    MissedEmailToJSON,
    PageMissedEmailProjection,
    PageMissedEmailProjectionFromJSON,
    PageMissedEmailProjectionToJSON,
} from '../models';

export interface GetAllMissedEmailsRequest {
    page?: number;
    size?: number;
    sort?: GetAllMissedEmailsSortEnum;
}

export interface GetMissedEmailRequest {
    missedEmailId: string;
}

/**
 * MissedEmailControllerApi - interface
 * 
 * @export
 * @interface MissedEmailControllerApiInterface
 */
export interface MissedEmailControllerApiInterface {
    /**
     * 
     * @summary Get all MissedEmails in paginated format
     * @param {number} [page] Optional page index in inbox list pagination
     * @param {number} [size] Optional page size in inbox list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissedEmailControllerApiInterface
     */
    getAllMissedEmailsRaw(requestParameters: GetAllMissedEmailsRequest): Promise<runtime.ApiResponse<PageMissedEmailProjection>>;

    /**
     * Get all MissedEmails in paginated format
     */
    getAllMissedEmails(requestParameters: GetAllMissedEmailsRequest): Promise<PageMissedEmailProjection>;

    /**
     * 
     * @summary Get MissedEmail
     * @param {string} missedEmailId MissedEmailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MissedEmailControllerApiInterface
     */
    getMissedEmailRaw(requestParameters: GetMissedEmailRequest): Promise<runtime.ApiResponse<MissedEmail>>;

    /**
     * Get MissedEmail
     */
    getMissedEmail(requestParameters: GetMissedEmailRequest): Promise<MissedEmail>;

}

/**
 * 
 */
export class MissedEmailControllerApi extends runtime.BaseAPI implements MissedEmailControllerApiInterface {

    /**
     * Get all MissedEmails in paginated format
     */
    async getAllMissedEmailsRaw(requestParameters: GetAllMissedEmailsRequest): Promise<runtime.ApiResponse<PageMissedEmailProjection>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/missed-emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageMissedEmailProjectionFromJSON(jsonValue));
    }

    /**
     * Get all MissedEmails in paginated format
     */
    async getAllMissedEmails(requestParameters: GetAllMissedEmailsRequest): Promise<PageMissedEmailProjection> {
        const response = await this.getAllMissedEmailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get MissedEmail
     */
    async getMissedEmailRaw(requestParameters: GetMissedEmailRequest): Promise<runtime.ApiResponse<MissedEmail>> {
        if (requestParameters.missedEmailId === null || requestParameters.missedEmailId === undefined) {
            throw new runtime.RequiredError('missedEmailId','Required parameter requestParameters.missedEmailId was null or undefined when calling getMissedEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/missed-emails/{MissedEmailId}`.replace(`{${"MissedEmailId"}}`, encodeURIComponent(String(requestParameters.missedEmailId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MissedEmailFromJSON(jsonValue));
    }

    /**
     * Get MissedEmail
     */
    async getMissedEmail(requestParameters: GetMissedEmailRequest): Promise<MissedEmail> {
        const response = await this.getMissedEmailRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAllMissedEmailsSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
