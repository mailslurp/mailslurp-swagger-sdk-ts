/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UploadAttachmentOptions,
    UploadAttachmentOptionsFromJSON,
    UploadAttachmentOptionsToJSON,
} from '../models';

export interface UploadAttachmentRequest {
    uploadOptions: UploadAttachmentOptions;
}

export interface UploadAttachmentBytesRequest {
    filename?: string;
}

export interface UploadMultipartFormRequest {
    file: Blob;
    contentType?: string;
    filename?: string;
    xFilename?: string;
}

/**
 * AttachmentControllerApi - interface
 * 
 * @export
 * @interface AttachmentControllerApiInterface
 */
export interface AttachmentControllerApiInterface {
    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * @summary Upload an attachment for sending using base64 file encoding
     * @param {UploadAttachmentOptions} uploadOptions uploadOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentControllerApiInterface
     */
    uploadAttachmentRaw(requestParameters: UploadAttachmentRequest): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using base64 file encoding
     */
    uploadAttachment(requestParameters: UploadAttachmentRequest): Promise<Array<string>>;

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * @summary Upload an attachment for sending using file byte stream input octet stream
     * @param {string} [filename] Optional filename to save upload with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentControllerApiInterface
     */
    uploadAttachmentBytesRaw(requestParameters: UploadAttachmentBytesRequest): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using file byte stream input octet stream
     */
    uploadAttachmentBytes(requestParameters: UploadAttachmentBytesRequest): Promise<Array<string>>;

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * @summary Upload an attachment for sending using Multipart Form
     * @param {Blob} file file
     * @param {string} [contentType] contentType
     * @param {string} [filename] filename
     * @param {string} [xFilename] x-filename
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentControllerApiInterface
     */
    uploadMultipartFormRaw(requestParameters: UploadMultipartFormRequest): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using Multipart Form
     */
    uploadMultipartForm(requestParameters: UploadMultipartFormRequest): Promise<Array<string>>;

}

/**
 * 
 */
export class AttachmentControllerApi extends runtime.BaseAPI implements AttachmentControllerApiInterface {

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using base64 file encoding
     */
    async uploadAttachmentRaw(requestParameters: UploadAttachmentRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.uploadOptions === null || requestParameters.uploadOptions === undefined) {
            throw new runtime.RequiredError('uploadOptions','Required parameter requestParameters.uploadOptions was null or undefined when calling uploadAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/attachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadAttachmentOptionsToJSON(requestParameters.uploadOptions),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using base64 file encoding
     */
    async uploadAttachment(requestParameters: UploadAttachmentRequest): Promise<Array<string>> {
        const response = await this.uploadAttachmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using file byte stream input octet stream
     */
    async uploadAttachmentBytesRaw(requestParameters: UploadAttachmentBytesRequest): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/attachments/bytes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.filename as any,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using file byte stream input octet stream
     */
    async uploadAttachmentBytes(requestParameters: UploadAttachmentBytesRequest): Promise<Array<string>> {
        const response = await this.uploadAttachmentBytesRaw(requestParameters);
        return await response.value();
    }

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using Multipart Form
     */
    async uploadMultipartFormRaw(requestParameters: UploadMultipartFormRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadMultipartForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.contentType !== undefined) {
            queryParameters['contentType'] = requestParameters.contentType;
        }

        if (requestParameters.filename !== undefined) {
            queryParameters['filename'] = requestParameters.filename;
        }

        if (requestParameters.xFilename !== undefined) {
            queryParameters['x-filename'] = requestParameters.xFilename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/attachments/multipart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     * Upload an attachment for sending using Multipart Form
     */
    async uploadMultipartForm(requestParameters: UploadMultipartFormRequest): Promise<Array<string>> {
        const response = await this.uploadMultipartFormRaw(requestParameters);
        return await response.value();
    }

}
