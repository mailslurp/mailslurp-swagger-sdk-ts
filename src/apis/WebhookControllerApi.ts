/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AbstractWebhookPayload,
    AbstractWebhookPayloadFromJSON,
    AbstractWebhookPayloadToJSON,
    CreateWebhookOptions,
    CreateWebhookOptionsFromJSON,
    CreateWebhookOptionsToJSON,
    PageWebhookProjection,
    PageWebhookProjectionFromJSON,
    PageWebhookProjectionToJSON,
    WebhookDto,
    WebhookDtoFromJSON,
    WebhookDtoToJSON,
    WebhookTestResult,
    WebhookTestResultFromJSON,
    WebhookTestResultToJSON,
} from '../models';

export interface CreateWebhookRequest {
    inboxId: string;
    webhookOptions: CreateWebhookOptions;
}

export interface DeleteWebhookRequest {
    inboxId: string;
    webhookId: string;
}

export interface GetAllWebhooksRequest {
    page?: number;
    size?: number;
    sort?: GetAllWebhooksSortEnum;
}

export interface GetTestWebhookPayloadRequest {
    eventName?: GetTestWebhookPayloadEventNameEnum;
}

export interface GetWebhookRequest {
    webhookId: string;
}

export interface GetWebhooksRequest {
    inboxId: string;
}

export interface SendTestDataRequest {
    webhookId: string;
}

/**
 * WebhookControllerApi - interface
 * 
 * @export
 * @interface WebhookControllerApiInterface
 */
export interface WebhookControllerApiInterface {
    /**
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     * @summary Attach a WebHook URL to an inbox
     * @param {string} inboxId inboxId
     * @param {CreateWebhookOptions} webhookOptions webhookOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookControllerApiInterface
     */
    createWebhookRaw(requestParameters: CreateWebhookRequest): Promise<runtime.ApiResponse<WebhookDto>>;

    /**
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     * Attach a WebHook URL to an inbox
     */
    createWebhook(requestParameters: CreateWebhookRequest): Promise<WebhookDto>;

    /**
     * 
     * @summary Delete and disable a Webhook for an Inbox
     * @param {string} inboxId inboxId
     * @param {string} webhookId webhookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookControllerApiInterface
     */
    deleteWebhookRaw(requestParameters: DeleteWebhookRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete and disable a Webhook for an Inbox
     */
    deleteWebhook(requestParameters: DeleteWebhookRequest): Promise<void>;

    /**
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     * @summary List Webhooks Paginated
     * @param {number} [page] Optional page index in list pagination
     * @param {number} [size] Optional page size in list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookControllerApiInterface
     */
    getAllWebhooksRaw(requestParameters: GetAllWebhooksRequest): Promise<runtime.ApiResponse<PageWebhookProjection>>;

    /**
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     * List Webhooks Paginated
     */
    getAllWebhooks(requestParameters: GetAllWebhooksRequest): Promise<PageWebhookProjection>;

    /**
     * 
     * @summary Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     * @param {'EMAIL_RECEIVED' | 'NEW_EMAIL' | 'NEW_CONTACT' | 'NEW_ATTACHMENT'} [eventName] eventName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookControllerApiInterface
     */
    getTestWebhookPayloadRaw(requestParameters: GetTestWebhookPayloadRequest): Promise<runtime.ApiResponse<AbstractWebhookPayload>>;

    /**
     * Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     */
    getTestWebhookPayload(requestParameters: GetTestWebhookPayloadRequest): Promise<AbstractWebhookPayload>;

    /**
     * 
     * @summary Get a webhook for an Inbox
     * @param {string} webhookId webhookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookControllerApiInterface
     */
    getWebhookRaw(requestParameters: GetWebhookRequest): Promise<runtime.ApiResponse<WebhookDto>>;

    /**
     * Get a webhook for an Inbox
     */
    getWebhook(requestParameters: GetWebhookRequest): Promise<WebhookDto>;

    /**
     * 
     * @summary Get all webhooks for an Inbox
     * @param {string} inboxId inboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookControllerApiInterface
     */
    getWebhooksRaw(requestParameters: GetWebhooksRequest): Promise<runtime.ApiResponse<Array<WebhookDto>>>;

    /**
     * Get all webhooks for an Inbox
     */
    getWebhooks(requestParameters: GetWebhooksRequest): Promise<Array<WebhookDto>>;

    /**
     * 
     * @summary Send webhook test data
     * @param {string} webhookId webhookId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookControllerApiInterface
     */
    sendTestDataRaw(requestParameters: SendTestDataRequest): Promise<runtime.ApiResponse<WebhookTestResult>>;

    /**
     * Send webhook test data
     */
    sendTestData(requestParameters: SendTestDataRequest): Promise<WebhookTestResult>;

}

/**
 * 
 */
export class WebhookControllerApi extends runtime.BaseAPI implements WebhookControllerApiInterface {

    /**
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     * Attach a WebHook URL to an inbox
     */
    async createWebhookRaw(requestParameters: CreateWebhookRequest): Promise<runtime.ApiResponse<WebhookDto>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling createWebhook.');
        }

        if (requestParameters.webhookOptions === null || requestParameters.webhookOptions === undefined) {
            throw new runtime.RequiredError('webhookOptions','Required parameter requestParameters.webhookOptions was null or undefined when calling createWebhook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/webhooks`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebhookOptionsToJSON(requestParameters.webhookOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookDtoFromJSON(jsonValue));
    }

    /**
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     * Attach a WebHook URL to an inbox
     */
    async createWebhook(requestParameters: CreateWebhookRequest): Promise<WebhookDto> {
        const response = await this.createWebhookRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete and disable a Webhook for an Inbox
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling deleteWebhook.');
        }

        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling deleteWebhook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/webhooks/{webhookId}`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))).replace(`{${"webhookId"}}`, encodeURIComponent(String(requestParameters.webhookId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete and disable a Webhook for an Inbox
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest): Promise<void> {
        await this.deleteWebhookRaw(requestParameters);
    }

    /**
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     * List Webhooks Paginated
     */
    async getAllWebhooksRaw(requestParameters: GetAllWebhooksRequest): Promise<runtime.ApiResponse<PageWebhookProjection>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/webhooks/paginated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageWebhookProjectionFromJSON(jsonValue));
    }

    /**
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     * List Webhooks Paginated
     */
    async getAllWebhooks(requestParameters: GetAllWebhooksRequest): Promise<PageWebhookProjection> {
        const response = await this.getAllWebhooksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     */
    async getTestWebhookPayloadRaw(requestParameters: GetTestWebhookPayloadRequest): Promise<runtime.ApiResponse<AbstractWebhookPayload>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.eventName !== undefined) {
            queryParameters['eventName'] = requestParameters.eventName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/webhooks/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractWebhookPayloadFromJSON(jsonValue));
    }

    /**
     * Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     */
    async getTestWebhookPayload(requestParameters: GetTestWebhookPayloadRequest): Promise<AbstractWebhookPayload> {
        const response = await this.getTestWebhookPayloadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a webhook for an Inbox
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest): Promise<runtime.ApiResponse<WebhookDto>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling getWebhook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhookId}`.replace(`{${"webhookId"}}`, encodeURIComponent(String(requestParameters.webhookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookDtoFromJSON(jsonValue));
    }

    /**
     * Get a webhook for an Inbox
     */
    async getWebhook(requestParameters: GetWebhookRequest): Promise<WebhookDto> {
        const response = await this.getWebhookRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all webhooks for an Inbox
     */
    async getWebhooksRaw(requestParameters: GetWebhooksRequest): Promise<runtime.ApiResponse<Array<WebhookDto>>> {
        if (requestParameters.inboxId === null || requestParameters.inboxId === undefined) {
            throw new runtime.RequiredError('inboxId','Required parameter requestParameters.inboxId was null or undefined when calling getWebhooks.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/inboxes/{inboxId}/webhooks`.replace(`{${"inboxId"}}`, encodeURIComponent(String(requestParameters.inboxId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebhookDtoFromJSON));
    }

    /**
     * Get all webhooks for an Inbox
     */
    async getWebhooks(requestParameters: GetWebhooksRequest): Promise<Array<WebhookDto>> {
        const response = await this.getWebhooksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send webhook test data
     */
    async sendTestDataRaw(requestParameters: SendTestDataRequest): Promise<runtime.ApiResponse<WebhookTestResult>> {
        if (requestParameters.webhookId === null || requestParameters.webhookId === undefined) {
            throw new runtime.RequiredError('webhookId','Required parameter requestParameters.webhookId was null or undefined when calling sendTestData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/webhooks/{webhookId}/test`.replace(`{${"webhookId"}}`, encodeURIComponent(String(requestParameters.webhookId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookTestResultFromJSON(jsonValue));
    }

    /**
     * Send webhook test data
     */
    async sendTestData(requestParameters: SendTestDataRequest): Promise<WebhookTestResult> {
        const response = await this.sendTestDataRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAllWebhooksSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
/**
    * @export
    * @enum {string}
    */
export enum GetTestWebhookPayloadEventNameEnum {
    EMAILRECEIVED = 'EMAIL_RECEIVED',
    NEWEMAIL = 'NEW_EMAIL',
    NEWCONTACT = 'NEW_CONTACT',
    NEWATTACHMENT = 'NEW_ATTACHMENT'
}
