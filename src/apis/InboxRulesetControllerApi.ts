/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateInboxRulesetOptions,
    CreateInboxRulesetOptionsFromJSON,
    CreateInboxRulesetOptionsToJSON,
    InboxRulesetDto,
    InboxRulesetDtoFromJSON,
    InboxRulesetDtoToJSON,
    PageInboxRulesetProjection,
    PageInboxRulesetProjectionFromJSON,
    PageInboxRulesetProjectionToJSON,
} from '../models';

export interface CreateNewInboxRulesetRequest {
    createInboxRulesetOptions: CreateInboxRulesetOptions;
    inboxId?: string;
}

export interface DeleteInboxRulesetRequest {
    id: string;
}

export interface DeleteInboxRulesetsRequest {
    inboxId?: string;
}

export interface GetInboxRulesetRequest {
    id: string;
}

export interface GetInboxRulesetsRequest {
    inboxId?: string;
    page?: number;
    size?: number;
    sort?: GetInboxRulesetsSortEnum;
}

/**
 * InboxRulesetControllerApi - interface
 * 
 * @export
 * @interface InboxRulesetControllerApiInterface
 */
export interface InboxRulesetControllerApiInterface {
    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * @summary Create an inbox ruleset
     * @param {CreateInboxRulesetOptions} createInboxRulesetOptions createInboxRulesetOptions
     * @param {string} [inboxId] Inbox id to attach ruleset to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxRulesetControllerApiInterface
     */
    createNewInboxRulesetRaw(requestParameters: CreateNewInboxRulesetRequest): Promise<runtime.ApiResponse<InboxRulesetDto>>;

    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * Create an inbox ruleset
     */
    createNewInboxRuleset(requestParameters: CreateNewInboxRulesetRequest): Promise<InboxRulesetDto>;

    /**
     * Delete inbox ruleset
     * @summary Delete an inbox ruleset
     * @param {string} id ID of inbox ruleset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxRulesetControllerApiInterface
     */
    deleteInboxRulesetRaw(requestParameters: DeleteInboxRulesetRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete inbox ruleset
     * Delete an inbox ruleset
     */
    deleteInboxRuleset(requestParameters: DeleteInboxRulesetRequest): Promise<void>;

    /**
     * Delete inbox rulesets. Accepts optional inboxId filter.
     * @summary Delete inbox rulesets
     * @param {string} [inboxId] Optional inbox id to attach ruleset to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxRulesetControllerApiInterface
     */
    deleteInboxRulesetsRaw(requestParameters: DeleteInboxRulesetsRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete inbox rulesets. Accepts optional inboxId filter.
     * Delete inbox rulesets
     */
    deleteInboxRulesets(requestParameters: DeleteInboxRulesetsRequest): Promise<void>;

    /**
     * Get inbox ruleset
     * @summary Get an inbox ruleset
     * @param {string} id ID of inbox ruleset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxRulesetControllerApiInterface
     */
    getInboxRulesetRaw(requestParameters: GetInboxRulesetRequest): Promise<runtime.ApiResponse<InboxRulesetDto>>;

    /**
     * Get inbox ruleset
     * Get an inbox ruleset
     */
    getInboxRuleset(requestParameters: GetInboxRulesetRequest): Promise<InboxRulesetDto>;

    /**
     * List all rulesets attached to an inbox
     * @summary List inbox rulesets
     * @param {string} [inboxId] Optional inbox id to get rulesets from
     * @param {number} [page] Optional page index in inbox ruleset list pagination
     * @param {number} [size] Optional page size in inbox ruleset list pagination
     * @param {'ASC' | 'DESC'} [sort] Optional createdAt sort direction ASC or DESC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxRulesetControllerApiInterface
     */
    getInboxRulesetsRaw(requestParameters: GetInboxRulesetsRequest): Promise<runtime.ApiResponse<PageInboxRulesetProjection>>;

    /**
     * List all rulesets attached to an inbox
     * List inbox rulesets
     */
    getInboxRulesets(requestParameters: GetInboxRulesetsRequest): Promise<PageInboxRulesetProjection>;

}

/**
 * 
 */
export class InboxRulesetControllerApi extends runtime.BaseAPI implements InboxRulesetControllerApiInterface {

    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * Create an inbox ruleset
     */
    async createNewInboxRulesetRaw(requestParameters: CreateNewInboxRulesetRequest): Promise<runtime.ApiResponse<InboxRulesetDto>> {
        if (requestParameters.createInboxRulesetOptions === null || requestParameters.createInboxRulesetOptions === undefined) {
            throw new runtime.RequiredError('createInboxRulesetOptions','Required parameter requestParameters.createInboxRulesetOptions was null or undefined when calling createNewInboxRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inboxId !== undefined) {
            queryParameters['inboxId'] = requestParameters.inboxId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/rulesets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInboxRulesetOptionsToJSON(requestParameters.createInboxRulesetOptions),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxRulesetDtoFromJSON(jsonValue));
    }

    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * Create an inbox ruleset
     */
    async createNewInboxRuleset(requestParameters: CreateNewInboxRulesetRequest): Promise<InboxRulesetDto> {
        const response = await this.createNewInboxRulesetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete inbox ruleset
     * Delete an inbox ruleset
     */
    async deleteInboxRulesetRaw(requestParameters: DeleteInboxRulesetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInboxRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/rulesets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete inbox ruleset
     * Delete an inbox ruleset
     */
    async deleteInboxRuleset(requestParameters: DeleteInboxRulesetRequest): Promise<void> {
        await this.deleteInboxRulesetRaw(requestParameters);
    }

    /**
     * Delete inbox rulesets. Accepts optional inboxId filter.
     * Delete inbox rulesets
     */
    async deleteInboxRulesetsRaw(requestParameters: DeleteInboxRulesetsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inboxId !== undefined) {
            queryParameters['inboxId'] = requestParameters.inboxId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/rulesets`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete inbox rulesets. Accepts optional inboxId filter.
     * Delete inbox rulesets
     */
    async deleteInboxRulesets(requestParameters: DeleteInboxRulesetsRequest): Promise<void> {
        await this.deleteInboxRulesetsRaw(requestParameters);
    }

    /**
     * Get inbox ruleset
     * Get an inbox ruleset
     */
    async getInboxRulesetRaw(requestParameters: GetInboxRulesetRequest): Promise<runtime.ApiResponse<InboxRulesetDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInboxRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/rulesets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxRulesetDtoFromJSON(jsonValue));
    }

    /**
     * Get inbox ruleset
     * Get an inbox ruleset
     */
    async getInboxRuleset(requestParameters: GetInboxRulesetRequest): Promise<InboxRulesetDto> {
        const response = await this.getInboxRulesetRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all rulesets attached to an inbox
     * List inbox rulesets
     */
    async getInboxRulesetsRaw(requestParameters: GetInboxRulesetsRequest): Promise<runtime.ApiResponse<PageInboxRulesetProjection>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inboxId !== undefined) {
            queryParameters['inboxId'] = requestParameters.inboxId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/rulesets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageInboxRulesetProjectionFromJSON(jsonValue));
    }

    /**
     * List all rulesets attached to an inbox
     * List inbox rulesets
     */
    async getInboxRulesets(requestParameters: GetInboxRulesetsRequest): Promise<PageInboxRulesetProjection> {
        const response = await this.getInboxRulesetsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetInboxRulesetsSortEnum {
    ASC = 'ASC',
    DESC = 'DESC'
}
