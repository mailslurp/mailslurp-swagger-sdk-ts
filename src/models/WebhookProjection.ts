/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Representation of a webhook
 * @export
 * @interface WebhookProjection
 */
export interface WebhookProjection {
    /**
     * 
     * @type {string}
     * @memberof WebhookProjection
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookProjection
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof WebhookProjection
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof WebhookProjection
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookProjection
     */
    inboxId?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookProjection
     */
    eventName?: WebhookProjectionEventNameEnum;
    /**
     * 
     * @type {Date}
     * @memberof WebhookProjection
     */
    createdAt?: Date;
}

export function WebhookProjectionFromJSON(json: any): WebhookProjection {
    return WebhookProjectionFromJSONTyped(json, false);
}

export function WebhookProjectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookProjection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'url': !exists(json, 'url') ? undefined : json['url'],
        'inboxId': !exists(json, 'inboxId') ? undefined : json['inboxId'],
        'eventName': !exists(json, 'eventName') ? undefined : json['eventName'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function WebhookProjectionToJSON(value?: WebhookProjection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'id': value.id,
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'url': value.url,
        'inboxId': value.inboxId,
        'eventName': value.eventName,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum WebhookProjectionEventNameEnum {
    EMAILRECEIVED = 'EMAIL_RECEIVED',
    NEWEMAIL = 'NEW_EMAIL',
    NEWCONTACT = 'NEW_CONTACT',
    NEWATTACHMENT = 'NEW_ATTACHMENT',
    EMAILOPENED = 'EMAIL_OPENED',
    EMAILREAD = 'EMAIL_READ'
}


