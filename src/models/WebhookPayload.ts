/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AttachmentMetaData,
    AttachmentMetaDataFromJSON,
    AttachmentMetaDataFromJSONTyped,
    AttachmentMetaDataToJSON,
} from './';

/**
 * MailSlurp webhook payload schema. This schema describes the JSON object that is sent via HTTP POST to webhook urls when an email is received by an inbox that a webhook is attached to. Payloads may be delivered multiple times so use the ID as a key for event uniqueness. The payload contains IDs for the email and inbox affected. Use these to fetch more data related to the event using appropriate inbox and email endpoints. See https://www.mailslurp.com/guides/email-webhooks/ for more information. Your webhook endpoint should accept POST HTTP request and return a 200 in under 30 seconds. Process the webhook asynchronously if you need to.
 * @export
 * @interface WebhookPayload
 */
export interface WebhookPayload {
    /**
     * List of attachment meta data objects if attachments present
     * @type {Array<AttachmentMetaData>}
     * @memberof WebhookPayload
     */
    attachmentMetaDatas?: Array<AttachmentMetaData>;
    /**
     * List of `BCC` recipients email was addressed to
     * @type {Array<string>}
     * @memberof WebhookPayload
     */
    bcc?: Array<string>;
    /**
     * List of `CC` recipients email was addressed to
     * @type {Array<string>}
     * @memberof WebhookPayload
     */
    cc?: Array<string>;
    /**
     * Date time of event creation
     * @type {Date}
     * @memberof WebhookPayload
     */
    createdAt?: Date;
    /**
     * ID of the email that was received. Use this ID for fetching the email
     * @type {string}
     * @memberof WebhookPayload
     */
    emailId?: string;
    /**
     * Name of the event type webhook is being triggered for
     * @type {string}
     * @memberof WebhookPayload
     */
    eventName?: WebhookPayloadEventNameEnum;
    /**
     * Who the email was sent from
     * @type {string}
     * @memberof WebhookPayload
     */
    from?: string;
    /**
     * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
     * @type {string}
     * @memberof WebhookPayload
     */
    id?: string;
    /**
     * Id of the inbox that receive an email
     * @type {string}
     * @memberof WebhookPayload
     */
    inboxId?: string;
    /**
     * The subject line of the email message
     * @type {string}
     * @memberof WebhookPayload
     */
    subject?: string;
    /**
     * List of `To` recipients email was addressed to
     * @type {Array<string>}
     * @memberof WebhookPayload
     */
    to?: Array<string>;
    /**
     * ID of webhook entity being triggered
     * @type {string}
     * @memberof WebhookPayload
     */
    webhookId?: string;
    /**
     * Name of the webhook being triggered
     * @type {string}
     * @memberof WebhookPayload
     */
    webhookName?: string;
}

export function WebhookPayloadFromJSON(json: any): WebhookPayload {
    return WebhookPayloadFromJSONTyped(json, false);
}

export function WebhookPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookPayload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attachmentMetaDatas': !exists(json, 'attachmentMetaDatas') ? undefined : ((json['attachmentMetaDatas'] as Array<any>).map(AttachmentMetaDataFromJSON)),
        'bcc': !exists(json, 'bcc') ? undefined : json['bcc'],
        'cc': !exists(json, 'cc') ? undefined : json['cc'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'emailId': !exists(json, 'emailId') ? undefined : json['emailId'],
        'eventName': !exists(json, 'eventName') ? undefined : json['eventName'],
        'from': !exists(json, 'from') ? undefined : json['from'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'inboxId': !exists(json, 'inboxId') ? undefined : json['inboxId'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'to': !exists(json, 'to') ? undefined : json['to'],
        'webhookId': !exists(json, 'webhookId') ? undefined : json['webhookId'],
        'webhookName': !exists(json, 'webhookName') ? undefined : json['webhookName'],
    };
}

export function WebhookPayloadToJSON(value?: WebhookPayload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attachmentMetaDatas': value.attachmentMetaDatas === undefined ? undefined : ((value.attachmentMetaDatas as Array<any>).map(AttachmentMetaDataToJSON)),
        'bcc': value.bcc,
        'cc': value.cc,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'emailId': value.emailId,
        'eventName': value.eventName,
        'from': value.from,
        'id': value.id,
        'inboxId': value.inboxId,
        'subject': value.subject,
        'to': value.to,
        'webhookId': value.webhookId,
        'webhookName': value.webhookName,
    };
}

/**
* @export
* @enum {string}
*/
export enum WebhookPayloadEventNameEnum {
    EMAILRECEIVED = 'EMAIL_RECEIVED'
}


