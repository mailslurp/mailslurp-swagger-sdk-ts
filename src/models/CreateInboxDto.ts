/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateInboxDto
 */
export interface CreateInboxDto {
    /**
     * Optional description of an inbox for labelling purposes
     * @type {string}
     * @memberof CreateInboxDto
     */
    description?: string;
    /**
     * Optionally specify an email address you want the inbox to have. When left blank an email address will be randomly assigned to the inbox usually ending in `@mailslurp.com`. Custom email addresses must include your own custom domain that you have configured in MailSlurp. So if your domain is `mysite.com` you can created any email address ending in `@mysite.com`. All email addresses are transformed to lowercase!
     * @type {string}
     * @memberof CreateInboxDto
     */
    emailAddress?: string;
    /**
     * When, if ever, will the inbox expire and be deleted. If null then this inbox is permanent and the emails in it won't be deleted. Timestamp passed as string.
     * @type {Date}
     * @memberof CreateInboxDto
     */
    expiresAt?: Date;
    /**
     * Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access
     * @type {boolean}
     * @memberof CreateInboxDto
     */
    favourite?: boolean;
    /**
     * Optional name of the inbox. Displayed in the dashboard for easier search
     * @type {string}
     * @memberof CreateInboxDto
     */
    name?: string;
    /**
     * Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.
     * @type {Array<string>}
     * @memberof CreateInboxDto
     */
    tags?: Array<string>;
}

export function CreateInboxDtoFromJSON(json: any): CreateInboxDto {
    return CreateInboxDtoFromJSONTyped(json, false);
}

export function CreateInboxDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateInboxDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'emailAddress': !exists(json, 'emailAddress') ? undefined : json['emailAddress'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (new Date(json['expiresAt'])),
        'favourite': !exists(json, 'favourite') ? undefined : json['favourite'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
    };
}

export function CreateInboxDtoToJSON(value?: CreateInboxDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'emailAddress': value.emailAddress,
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
        'favourite': value.favourite,
        'name': value.name,
        'tags': value.tags,
    };
}


