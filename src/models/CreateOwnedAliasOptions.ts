/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Create email alias options. Email aliases can be used to mask real email addresses behind an ID. You can also attach an inbox to an alias so that any email received by the inbox email address if forwarded to the alias email address.
 * @export
 * @interface CreateOwnedAliasOptions
 */
export interface CreateOwnedAliasOptions {
    /**
     * Email address to be hidden behind alias
     * @type {string}
     * @memberof CreateOwnedAliasOptions
     */
    emailAddress?: string;
    /**
     * Optional inbox ID to attach to alias. Emails received by this inbox will be forwarded to the alias email address
     * @type {string}
     * @memberof CreateOwnedAliasOptions
     */
    inboxId?: string;
    /**
     * Optional name for alias
     * @type {string}
     * @memberof CreateOwnedAliasOptions
     */
    name?: string;
    /**
     * Optional proxied flag. When proxied is true alias will forward the incoming emails to the aliased email address via a proxy inbox. A new proxy is created for every new email thread. By replying to the proxy you can correspond with using your email alias without revealing your real email address.
     * @type {boolean}
     * @memberof CreateOwnedAliasOptions
     */
    proxied?: boolean;
}

export function CreateOwnedAliasOptionsFromJSON(json: any): CreateOwnedAliasOptions {
    return CreateOwnedAliasOptionsFromJSONTyped(json, false);
}

export function CreateOwnedAliasOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOwnedAliasOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'emailAddress': !exists(json, 'emailAddress') ? undefined : json['emailAddress'],
        'inboxId': !exists(json, 'inboxId') ? undefined : json['inboxId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'proxied': !exists(json, 'proxied') ? undefined : json['proxied'],
    };
}

export function CreateOwnedAliasOptionsToJSON(value?: CreateOwnedAliasOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'emailAddress': value.emailAddress,
        'inboxId': value.inboxId,
        'name': value.name,
        'proxied': value.proxied,
    };
}


