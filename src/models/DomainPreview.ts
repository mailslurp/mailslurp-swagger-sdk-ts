/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Preview object for domain entity
 * @export
 * @interface DomainPreview
 */
export interface DomainPreview {
    /**
     * 
     * @type {string}
     * @memberof DomainPreview
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPreview
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainPreview
     */
    catchAllInboxId?: string;
    /**
     * 
     * @type {Date}
     * @memberof DomainPreview
     */
    createdAt?: Date;
    /**
     * Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
     * @type {string}
     * @memberof DomainPreview
     */
    domainType?: DomainPreviewDomainTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DomainPreview
     */
    verified?: boolean;
}

export function DomainPreviewFromJSON(json: any): DomainPreview {
    return DomainPreviewFromJSONTyped(json, false);
}

export function DomainPreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainPreview {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'catchAllInboxId': !exists(json, 'catchAllInboxId') ? undefined : json['catchAllInboxId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'domainType': !exists(json, 'domainType') ? undefined : json['domainType'],
        'verified': !exists(json, 'verified') ? undefined : json['verified'],
    };
}

export function DomainPreviewToJSON(value?: DomainPreview | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'domain': value.domain,
        'catchAllInboxId': value.catchAllInboxId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'domainType': value.domainType,
        'verified': value.verified,
    };
}

/**
* @export
* @enum {string}
*/
export enum DomainPreviewDomainTypeEnum {
    HTTPINBOX = 'HTTP_INBOX',
    SMTPDOMAIN = 'SMTP_DOMAIN'
}


